- name: Verify
  hosts: all
  gather_facts: false

  vars:
    unific_hostname: "unifictest"
    unific_docker_volume_name: "unific-test-data"
    unific_network_name: "utestlan"
    unific_network_subnet: "172.200.3.0/24"
    unific_network_gateway: "172.200.3.1"

  tasks:
  - name: Get info on volume
    community.docker.docker_volume_info:
      name: "{{ unific_docker_volume_name }}"
    register: volinfo

  - name: Verify volume exists
    assert:
      that: volinfo.exists

  - name: Get info on container
    community.docker.docker_container_info:
      name: "unific"
    register: coninfo

  - name: Verify container exists and is running
    assert:
      that:
        - coninfo.exists
        - coninfo.container['State']['Running']
  
  - name: Verify container labels
    assert:
      that:
        - coninfo.container['Config']['Labels']['traefik.enable'] == 'true'
        - coninfo.container['Config']['Labels']['traefik.http.routers.unific.rule'] == "Host(`{{ unific_hostname }}.example.com`)"
        - coninfo.container['Config']['Labels']['traefik.http.routers.unific.entrypoints'] == 'http,https'
        - coninfo.container['Config']['Labels']['traefik.http.routers.unific.tls.certresolver'] == 'letsencrypt'

  - name: Get info on network
    community.docker.docker_network_info:
      name: "{{ unific_network_name }}"
    register: ninfo

  - name: Verify docker network
    assert:
      that:
        - ninfo.exists
        - ninfo.network['Driver'] == 'bridge'
        - ninfo.network['IPAM']['Config'][0]['Subnet'] == "{{ unific_network_subnet }}"
        - ninfo.network['IPAM']['Config'][0]['Gateway'] == "{{ unific_network_gateway }}"
        # Note that the network is tied to the container name, not the hostname
        - ninfo.network['Containers']["{{ coninfo.container['Id'] }}"]['Name'] == "unific"
